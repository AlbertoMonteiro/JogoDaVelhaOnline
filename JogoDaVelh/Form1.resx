<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        //8AAP//AAD//wAA//8AAP//AAD//wAA//8=
</value>
  </data>
</root>